@model WFM.Models.Store.Plan
@using WFM.Extensions
@using System.Text

@{
    ViewData["Title"] = "Index";

    var startDate = Model.Assignments.OrderBy(x => x.Start).FirstOrDefault()?.Start ?? DateTime.Now;
    var endDate = Model.Assignments.OrderBy(x => x.End).LastOrDefault()?.End ?? DateTime.Now.AddDays(7);

    var holidays = new StringBuilder();
    for (var date = startDate; date < endDate; date = date.AddDays(1))
    {
        if (!date.IsWorkDay())
            holidays.Append($"{{ start: new Date({date.Year}, {date.Month-1}, {date.Day}, 0, 0), end: new Date({date.Year}, {date.Month-1}, {date.Day}, 23, 59), content: \"\", type: \"background\" }},");
    }
}

<div>
    <h4>План по ресурсам</h4>
    <hr />
    <div class="row">
        <div class="col-12"> <div id="timeline"></div> </div>
    </div>
</div>
<div>
    @Html.ActionLink("Запланировать", "Plan")
</div>


@section Scripts{

    <script src="~/lib/vis-timeline/dist/vis-timeline-graph2d.min.js"></script>
    <script type="text/javascript">
        $(() => {
            var groups = new vis.DataSet([
                @Html.Raw(String.Join(","+Environment.NewLine, Model.Resources.Select(resource=>$"{{\"content\": \"{resource.Name}\", \"id\": \"{resource.Id}\"}}")))
            ]);
            
            var items = new vis.DataSet([
                @Html.Raw(holidays.ToString())
                @Html.Raw(String.Join(","+Environment.NewLine, Model.Assignments.Select(assignment=>$"{{ start: new Date({assignment.Start.Year}, {assignment.Start.Month-1}, {assignment.Start.Day}, {assignment.Start.Hour}, {assignment.Start.Minute}), end: new Date({assignment.End.Year}, {assignment.End.Month-1}, {assignment.End.Day}, {assignment.End.Hour}, {assignment.End.Minute}), group: \"{assignment.ResourceId}\", content: \"{assignment.Task.Name}\", id: \"{Guid.NewGuid()}\" }}")))
            ]);

            new Date()

            var container = document.getElementById('timeline');
            var options = {
                groupTemplate: function (group) {
                    var container = document.createElement('div');
                    var label = document.createElement('span');
                    label.innerHTML = group.content + ' ';
                    container.insertAdjacentElement('afterBegin', label);
                    return container;
                },
                orientation: 'both',
                editable: false,
                groupEditable: false,
                start: new Date(@startDate.Year, @(startDate.Month-1), @startDate.Day),
                end: new Date(@endDate.Year, @(endDate.Month-1), @endDate.Day)
            };

            var timeline = new vis.Timeline(container);
            timeline.setOptions(options);
            timeline.setGroups(groups);
            timeline.setItems(items);
        });
    </script>

}